Search.setIndex({"docnames": ["api-docs/api", "api-docs/api-abstract", "api-docs/api-bitarray-implementation", "api-docs/api-numpy-implementation", "api-docs/api-setbased-implementation", "api-docs/api-util", "index", "tutorials/theodias-tutorial", "tutorials/theodias-tutorials", "tutorials/visualisation"], "filenames": ["api-docs/api.rst", "api-docs/api-abstract.rst", "api-docs/api-bitarray-implementation.rst", "api-docs/api-numpy-implementation.rst", "api-docs/api-setbased-implementation.rst", "api-docs/api-util.rst", "index.rst", "tutorials/theodias-tutorial.ipynb", "tutorials/theodias-tutorials.rst", "tutorials/visualisation.ipynb"], "titles": ["API Documentation", "Abstract Base Classes", "Bitarray Implementation", "Numpy Implementation", "Set Based Implementation", "Utility Methods", "Theodias", "Introduction of using the <code class=\"docutils literal notranslate\"><span class=\"pre\">theodias</span></code> package", "Theodias Tutorials", "Visualising Dialectical Structures"], "terms": {"abstract": [0, 7], "base": [0, 2, 3, 5, 7, 9], "class": [0, 2, 3, 4, 5, 6, 7], "posit": [0, 2, 3, 4, 5], "dialecticalstructur": [0, 2, 3, 4, 5, 7], "numpi": 0, "implement": [0, 1, 5, 7], "numpyposit": [0, 5, 7], "dagnumpydialecticalstructur": [0, 4], "bddnumpydialecticalstructur": [0, 2, 4, 5], "bitarrai": [0, 1, 3, 4, 6], "bitarrayposit": [0, 1, 3, 4, 7], "dagbitarraydialecticalstructur": 0, "set": [0, 1, 2, 3, 5, 7, 9], "setbasedposit": [0, 7], "dagsetbaseddialecticalstructur": 0, "util": [0, 7, 9], "method": [0, 1, 2, 3, 4, 6, 7], "A": [1, 2, 3, 4, 5, 6, 7], "python": [1, 2, 3, 4, 6, 7], "packag": [6, 8], "dialect": [1, 2, 3, 4, 5, 6], "structur": [1, 2, 3, 4, 5, 6], "The": [1, 2, 3, 4, 5, 6, 7, 8, 9], "provid": [1, 2, 3, 4, 6, 7, 8], "differ": [0, 1, 2, 3, 4, 5, 6, 7], "appli": [6, 7], "theori": [6, 7], "introduc": [6, 7], "betz2010": 6, "betz2013": 6, "come": [], "you": [1, 5, 6, 7, 9], "can": [1, 2, 3, 4, 5, 6, 7, 9], "local": [6, 7], "first": [1, 2, 3, 4, 6], "git": 6, "clone": 6, "repositori": 6, "github": 6, "com": 6, "debatelab": [], "run": [6, 9], "e": [1, 2, 3, 5, 6, 7, 9], "directori": [5, 6, 9], "g": [1, 2, 6, 7, 9], "path": [5, 6, 7, 9], "contain": [5, 6], "setup": 6, "file": [5, 6, 7, 9], "py": 6, "option": [2, 3, 5, 6], "edit": 6, "mode": [6, 7], "allow": [], "chang": [1, 7, 9], "requir": [6, 9], "version": [5, 6], "3": [1, 2, 3, 4, 6, 7, 9], "8": [6, 7], "depend": [1, 6, 7, 9], "numba": 6, "pysat": [5, 6], "which": [2, 3, 4, 5, 6, 7, 9], "when": [2, 5], "remodel": [], "jupyt": [6, 8], "notebook": [6, 8, 9], "step": [6, 8], "instruct": [6, 8], "further": [6, 9], "detail": [5, 6, 7], "found": 6, "api": 6, "logger": 6, "name": [0, 1, 2, 3, 4, 5, 6, 7], "doe": [1, 5, 6, 7], "add": [1, 2, 3, 4, 6], "ani": [5, 6, 7], "handler": 6, "accordingli": 6, "print": [5, 6, 7, 9], "sy": [6, 9], "stderr": [6, 9], "applic": 6, "specifi": [1, 2, 3, 4, 5, 6, 7], "other": [1, 2, 3, 4, 5, 6, 7, 9], "configur": 6, "see": [5, 6, 9], "http": 6, "doc": 6, "org": 6, "howto": 6, "html": 6, "librari": 6, "todo": 9, "betz": [5, 6, 7], "2010": [6, 7], "dialektisch": 6, "strukturen": 6, "frankfurt": 6, "m": 6, "klostermann": 6, "2013": [5, 6, 7], "debat": [5, 6], "dynam": [5, 6], "how": 6, "controversi": 6, "improv": 6, "our": 6, "belief": [6, 7], "synthes": 6, "dordrecht": 6, "springer": 6, "function": [1, 2, 3, 4, 5, 7, 9], "ar": [1, 2, 3, 4, 5, 7, 9], "describ": 7, "two": [1, 2, 3, 4, 7], "creat": [2, 5, 7], "manipul": 7, "calcul": [2, 3, 5, 7], "properti": 7, "repres": [1, 2, 3, 4, 5, 7], "sentenc": [1, 2, 3, 4, 5, 7], "pool": [1, 2, 3, 4, 5, 7], "includ": [1, 2, 3, 4, 5, 7], "w": 7, "r": 7, "t": [5, 7], "runtim": 7, "perform": [4, 7], "dag": [2, 3, 7], "direct": [2, 3, 7], "acycl": [2, 3, 7], "graph": [2, 3, 7], "all": [1, 2, 3, 4, 5, 7, 9], "import": [5, 9], "stuctur": 7, "store": [2, 3, 7], "dure": [5, 7], "thi": [1, 2, 3, 4, 5, 9], "i": [1, 2, 3, 4, 5, 7, 9], "fast": 7, "small": 7, "n": [1, 2, 3, 4, 5, 7], "15": 7, "we": [4, 7, 9], "recommend": [2, 3, 7], "follow": [3, 7, 8, 9], "standard": 7, "dagdialecticalstructur": [5, 7], "bdd": [3, 7], "binari": [3, 7], "decis": [3, 7], "diagramm": 7, "tree": 7, "represent": [1, 2, 3, 4, 5, 7], "compar": [5, 7], "most": [1, 2, 3, 4, 5, 7], "even": 7, "larger": [2, 3, 7], "10": [1, 2, 3, 4, 7], "howev": 7, "becom": [3, 7], "more": [2, 3, 7, 9], "difficult": 7, "consist": [1, 2, 3, 4, 5, 7], "axiomat": [1, 2, 3, 4, 7], "without": [1, 2, 3, 4, 5, 7], "confin": 7, "sourc": [1, 2, 3, 4, 6, 7, 9], "minim": [1, 2, 3, 4, 5, 7], "link": [], "need": 9, "bdddialecticalstructur": [5, 7], "download": [7, 9], "from": [1, 2, 3, 4, 5, 6, 7, 9], "here": [7, 9], "tupel": [1, 7], "left": [1, 7], "": [1, 2, 3, 4, 5, 7, 9], "right": [1, 7, 9], "s_1": [1, 2, 3, 4, 7], "s_2": [1, 2, 3, 4, 7], "dot": [1, 2, 3, 4, 5, 7], "s_n": [1, 2, 3, 4, 7], "neg": [1, 2, 3, 4, 5, 7], "argument": [1, 2, 3, 4, 5, 7, 9], "an": [1, 2, 3, 4, 5, 7, 9], "p_a": [1, 2, 3, 4, 7], "c_a": [1, 2, 3, 4, 7], "defin": [1, 2, 3, 4, 5, 7], "pair": [1, 2, 3, 4, 7], "premis": [1, 2, 3, 4, 5, 7], "subset": [1, 2, 3, 4, 7], "conclus": [1, 2, 3, 4, 5, 7], "size": [0, 1, 2, 3, 4, 5, 7], "list": [1, 2, 3, 4, 5, 7], "sentent": 7, "numer": [1, 7], "minu": 7, "sign": 7, "indic": [2, 5, 7], "negat": [1, 2, 3, 4, 5, 7], "For": [1, 2, 3, 4, 7], "instanc": [1, 2, 3, 4, 5, 7], "1": [1, 2, 3, 4, 5, 7, 9], "4": [1, 2, 3, 4, 7, 9], "premsis": 7, "s_3": [1, 2, 3, 4, 7], "s_4": [1, 2, 3, 4, 7], "sentencepool": [2, 7], "7": [2, 3, 7], "5": [7, 9], "6": [2, 3, 7], "2": [1, 2, 3, 4, 5, 7, 9], "from_argu": [0, 1, 2, 3, 4, 7], "state": 7, "mathcal": [1, 2, 3, 4, 7], "over": [1, 2, 3, 4, 5, 7], "intern": 7, "independ": 7, "agent": 7, "believ": 7, "standardposit": [5, 7], "s_5": 7, "belief_state_a": 7, "from_set": [0, 1, 2, 3, 4, 7], "fals": [1, 2, 3, 4, 5, 7, 9], "belief_state_b": 7, "sever": 7, "determin": [1, 2, 3, 4, 7], "regard": 7, "given": [1, 2, 3, 4, 5, 7, 9], "implic": 7, "inferenti": [5, 7], "relationship": 7, "encod": [5, 7], "f": 7, "closur": [0, 1, 2, 3, 4, 7], "check": [1, 2, 3, 4, 5, 7], "whether": [1, 2, 3, 4, 5, 7], "is_consist": [0, 1, 2, 3, 4, 7], "each": [1, 2, 3, 4, 5, 7], "are_compat": [0, 1, 2, 3, 4, 7], "true": [1, 2, 3, 4, 5, 7, 9], "compound": 7, "thereof": 7, "long": [5, 7], "modul": [5, 7], "handl": [5, 7], "them": [1, 7, 9], "dictionari": [1, 5, 7], "code": [5, 6, 7, 9], "tau_dump": [0, 5, 7], "o": [5, 7, 9], "getcwd": [7, 9], "string": [1, 2, 3, 4, 5, 7], "pos_json_str": 7, "indent": [5, 7], "pos_list": 7, "0": [1, 2, 3, 4, 5, 7, 9], "output_file_path": 7, "join": [7, 9], "open": 7, "output_fil": 7, "34": 7, "n_unnegated_sentence_pool": [1, 2, 3, 4, 5, 7], "If": [1, 2, 3, 4, 5, 7], "save": [5, 7], "consid": [1, 7], "later": 7, "serialize_implement": [5, 7], "module_nam": [5, 7], "bitarray_implement": 7, "class_nam": [5, 7], "similarli": 7, "simpl": [5, 7], "either": [5, 7], "taken": [5, 7], "explicitli": 7, "via": [5, 7], "paramet": [1, 2, 3, 4, 5, 7], "tau_load": [0, 5, 7], "use_json_specified_typ": [5, 7], "type": [1, 2, 3, 4, 5, 7], "anoth": [1, 2, 3, 4, 7], "position_modul": [5, 7], "position_class": [5, 7], "input_file_path": 7, "input_fil": 7, "obj": 7, "lt": 7, "39": 7, "set_implement": 7, "gt": 7, "us": [1, 4, 5, 6, 8], "basic": [8, 9], "visualis": 8, "tau": [5, 6, 7], "offer": 9, "some": [5, 9], "helper": [5, 9], "export": 9, "tex": [5, 9], "These": 9, "transform": 9, "shown": 9, "create_random_argu": [0, 5, 9], "write_as_tex": [0, 5, 9], "write_as_dot": [0, 5, 9], "ipython": 9, "displai": 9, "svg": 9, "subprocess": 9, "call": [5, 7, 9], "environ": 9, "chdir": 9, "remov": 9, "def": 9, "execute_command": 9, "command": 9, "program_nam": 9, "try": 9, "retcod": 9, "shell": 9, "termin": 9, "signal": 9, "except": 9, "oserror": 9, "execut": [7, 9], "fail": 9, "By": 9, "program": 9, "render": 9, "pdf": 9, "what": 9, "have": [1, 2, 3, 4, 7, 9], "reli": 9, "dot2tex": 9, "pdflatex": 9, "pdf2svg": 9, "dot2svg": 9, "dot_file_nam": 9, "none": [1, 2, 3, 4, 5, 9], "keep_temporary_fil": 9, "dot2tex_templ": 9, "dot2tex_sw": 9, "templat": 9, "It": [3, 5, 9], "addition": 9, "temporari": 9, "delet": 9, "one": [3, 5, 9], "instal": 9, "might": [5, 9], "specif": [1, 5, 7, 9], "latex": 9, "tikz": 9, "find": 9, "current_dir": 9, "work": 9, "gener": [1, 2, 4, 5, 9], "being": [1, 2, 3, 4, 9], "put": 9, "file_nam": [5, 9], "split": 9, "ftikz": 9, "crop": 9, "margin": 9, "5pt": 9, "tmath": 9, "autos": 9, "tex2pdf": 9, "escap": [5, 9], "temp": 9, "aux": 9, "log": 9, "exist": 9, "return": [1, 2, 3, 4, 5, 9], "arg": 9, "variat": [5, 9], "connect": [5, 9], "nice": 9, "kept": 9, "svg_file_nam": 9, "instead": [5, 9], "just": 9, "show": 9, "rich": 9, "system": 9, "show_argu": 9, "file_name_without_suffix": 9, "img_tmp": 9, "filenam": 9, "__init__": [0, 1, 2, 3, 4, 5], "are_minimally_compat": [], "as_bitarrai": [0, 1, 2, 3, 4], "as_list": [0, 1, 2, 3, 4], "as_set": [0, 1, 2, 3, 4, 7], "as_ternari": [0, 1, 2, 3, 4], "domain": [0, 1, 2, 3, 4], "intersect": [0, 1, 2, 3, 4, 7], "is_accept": [0, 1, 2, 3, 4], "is_in_domain": [0, 1, 2, 3, 4], "is_minimally_consist": [0, 1, 2, 3, 4], "is_subposit": [0, 1, 2, 3, 4], "neighbour": [0, 1, 2, 3, 4], "sentence_pool": [0, 1, 2, 3, 4], "subposit": [0, 1, 2, 3, 4], "union": [0, 1, 2, 3, 4, 7], "add_argu": [0, 1, 2, 3, 4], "axiom": [0, 1, 2, 3, 4], "closed_posit": [0, 1, 2, 3, 4], "consistent_complete_posit": [0, 1, 2, 3, 4], "consistent_posit": [0, 1, 2, 3, 4], "degree_of_justif": [0, 1, 2, 3, 4], "entail": [0, 1, 2, 3, 4], "get_argu": [0, 1, 2, 3, 4], "get_nam": [0, 1, 2, 3, 4], "is_clos": [0, 1, 2, 3, 4], "is_complet": [0, 1, 2, 3, 4, 7], "is_minim": [0, 1, 2, 3, 4], "minimal_posit": [0, 1, 2, 3, 4], "minimally_consistent_posit": [0, 1, 2, 3, 4], "n_complete_extens": [0, 1, 2, 3, 4], "set_nam": [0, 1, 2, 3, 4], "as_np_arrai": [0, 3], "direct_subposit": [0, 3], "np_neighbour": [], "to_numpy_posit": [0, 3], "complete_extens": [0, 2], "to_bitarray_posit": [0, 2], "as_setbased_posit": [0, 4], "complete_minimally_consistent_posit": [0, 2, 3, 4], "compute_complete_consistent_posit": [0, 4], "taujsonencod": [0, 5], "default": [0, 1, 2, 3, 4, 5], "arg_to_cnf": [0, 5], "args2cnf": [], "create_random_argument_list": [0, 5], "get_principl": [0, 5], "inferential_dens": [0, 5], "is_satisfi": [0, 5], "load_dialectical_structur": [], "number_of_complete_consistent_posit": [0, 5], "random_dialectical_structur": [0, 5], "random_position_as_set": [0, 5], "random_posit": [0, 5], "save_dialectical_structur": [], "tau_decod": [0, 5], "theodia": [1, 2, 3, 4, 5, 9], "abc": 1, "do": [1, 2, 3, 4], "necessarili": 1, "adher": 1, "theoret": [1, 2, 3, 4, 7], "compat": [1, 2, 3, 4], "iff": [1, 2, 3, 4, 5], "cup": [1, 2, 3, 4], "bool": [1, 2, 3, 4, 5], "bit": [1, 2, 3, 4], "accept": [1, 2, 3, 4], "second": [1, 2, 3, 4], "reject": [1, 2, 3, 4], "suspens": [1, 2, 3, 4], "correspond": [1, 2, 3, 4, 7], "both": [1, 2, 3, 4], "flat": [1, 2, 3, 4, 5], "contradict": [1, 2, 3, 4, 5], "present": [1, 2, 3, 4], "10001001": [1, 2, 3, 4], "possibl": [1, 2, 3, 4, 7], "otherwis": [1, 2, 3, 4, 5], "should": [1, 2, 3, 4, 5], "integ": [1, 2, 3, 4, 5], "valu": [1, 2, 3, 4, 5], "s_i": [1, 2, 3, 4], "order": [1, 2, 3, 4], "int": [1, 2, 3, 4, 5], "ternari": [1, 2, 3, 4], "least": 5, "notin": [1, 2, 3, 4], "zero": [1, 2, 3, 4], "2101": [1, 2, 3, 4], "cannot": [1, 7], "wai": 1, "under": [1, 2, 3, 4], "static": [1, 2, 3, 4], "instanci": [1, 2, 3, 4], "postion": [], "foral": [1, 2, 3, 4], "rightarrow": [1, 2, 3, 4], "inclus": [1, 2, 3, 4], "depth": [1, 2, 3, 4], "reach": [1, 2, 3, 4], "mani": [1, 2, 3, 4], "adjust": [1, 2, 3, 4], "individu": [1, 2, 3, 4], "itself": [1, 2, 3, 4], "number": [1, 2, 3, 4, 5], "sum_": [1, 2, 3, 4], "k": [1, 2, 3, 4, 5], "d": [1, 2, 3, 4, 5], "choos": [1, 2, 3, 4, 5], "where": [1, 2, 3, 4, 5], "unneg": [1, 2, 3, 4], "neighbourhood": [1, 2, 3, 4], "iter": [1, 2, 3, 4, 5], "onli": [1, 2, 3, 4, 5, 7], "half": [1, 2, 3, 4], "full": [1, 2, 3, 4, 5], "amount": [1, 2, 3, 4], "only_consistent_subposit": [1, 2, 3, 4], "empti": [1, 2, 3, 4, 5], "last": [1, 2, 3, 4, 5], "element": [1, 2, 3, 4, 5], "conveni": [1, 2, 3, 4, 5], "position1": [1, 2, 3, 4], "position2": [1, 2, 3, 4], "complet": [1, 2, 3, 4, 5], "positit": [1, 2, 3, 4], "extend": [1, 2, 3, 4], "b": [1, 2, 3, 4], "basi": [1, 2, 3, 4, 5], "proper": [1, 2, 3, 4], "c": [1, 2, 3, 4], "throw": [], "valueerror": [1, 2, 3, 4, 5, 7], "inconsist": [1, 2, 3, 4], "close": [1, 2, 3, 4], "note": [1, 2, 3, 4], "consequ": [1, 2, 3, 4, 7], "non": [1, 2, 3, 4, 5, 7], "condit": [1, 2, 3, 4], "degre": [1, 2, 3, 4], "justif": [1, 2, 3, 4], "doj": [1, 2, 3, 4], "frac": [1, 2, 3, 4, 5], "sigma_": [1, 2, 3, 4], "ab": [1, 2, 3, 4], "float": [1, 2, 3, 4, 5], "respect": [1, 2, 3, 4, 5], "everi": [1, 2, 3, 4, 5], "also": [1, 2, 3, 4], "str": [1, 2, 3, 4, 5, 7], "inner": [1, 2, 3, 4], "get": [1, 2, 3, 4, 5], "ident": [1, 2, 3, 4, 7], "hold": [1, 2, 3, 4], "p": [1, 2, 3, 4, 5], "partial": [1, 2, 3, 4], "subseteq": [1, 2, 3, 4], "extens": [1, 2, 3, 4, 5], "dialet": [1, 2, 3, 4], "ba": 2, "instanti": [1, 2, 3, 5], "arrai": [2, 3, 5], "take": [2, 5], "obtain": 2, "statu": 2, "s_": [2, 3], "cdot": [2, 3], "exampl": [2, 3], "lbrace": [2, 3], "rbrace": [2, 3], "correpond": [2, 3], "10010000001000": 2, "hand": [2, 3], "mai": [2, 5], "comfort": [2, 3], "pos2": [1, 2, 3, 7], "self": [2, 3], "less": [2, 3], "costli": [2, 3], "than": [2, 3], "inform": [2, 3], "about": [2, 3], "grow": [2, 3], "exponenti": [2, 3], "suitabl": [2, 3], "initial_argu": [2, 3, 4], "retriev": 2, "node": 2, "convert": [2, 3, 5], "po": 3, "entri": 3, "index": 3, "length": 3, "stand": 3, "denot": 3, "absent": 3, "ndarrai": 3, "associ": 3, "accord": 3, "convent": 3, "abstent": 3, "exactli": 3, "diagram": 3, "initi": 3, "collect": 5, "kwarg": 5, "constructor": 5, "jsonencod": 5, "sensibl": 5, "skipkei": 5, "typeerror": 5, "attempt": 5, "kei": [1, 5, 7], "item": 5, "simpli": 5, "skip": 5, "ensure_ascii": 5, "output": 5, "guarante": 5, "object": 5, "incom": 5, "ascii": 5, "charact": 5, "check_circular": 5, "dict": 5, "custom": 5, "circular": 5, "refer": [4, 5], "prevent": 5, "infinit": 5, "recurs": 5, "would": 5, "caus": 5, "recursionerror": 5, "place": 5, "allow_nan": 5, "nan": 5, "infin": 5, "behavior": 5, "json": 5, "compliant": 5, "javascript": 5, "decod": 5, "sort_kei": 5, "sort": 5, "regress": 5, "test": 5, "ensur": 5, "serial": 5, "dai": 5, "member": 5, "pretti": 5, "level": 5, "insert": 5, "newlin": 5, "compact": 5, "separ": 5, "item_separ": 5, "key_separ": 5, "tupl": 5, "To": [5, 9], "elimin": 5, "whitespac": 5, "rais": [1, 2, 3, 4, 5, 7], "cnf": 5, "like": 5, "n_sentence_pool": 5, "formula": 5, "conjunct": 5, "normal": 5, "form": [1, 5, 7], "ad": 5, "tautolog": 5, "manner": 5, "vee": 5, "n_arguments_min": 5, "n_arguments_max": 5, "n_sentenc": 5, "n_premises_max": 5, "n_premises_weight": 5, "random": 5, "fix": 5, "desir": 5, "between": 5, "n_argument": 5, "n_max_premis": 5, "n_principl": 5, "use_all_sent": 5, "max_loop": 5, "1000": 5, "satisfi": 5, "furthermor": 5, "avoid": 5, "beg": 5, "question": 5, "repeat": 5, "among": 5, "same": [1, 5, 7], "its": [1, 5, 7], "occur": 5, "onc": [1, 5, 7], "maxim": 5, "per": 5, "principl": 5, "chosen": 5, "randomli": 5, "constantli": 5, "distribut": 5, "uniform": 5, "weight": 5, "relat": 5, "attack": 5, "support": 5, "algorithm": 5, "abl": [], "limit": [], "runtimewarn": 5, "thrown": [], "break": 5, "possibli": [1, 2, 3, 4, 5], "endless": 5, "loop": 5, "thei": 5, "fit": 5, "longer": 5, "multipl": 5, "count": 5, "dialectical_structur": 5, "densiti": 5, "math": 5, "au": 5, "As": [], "44": 5, "log_": 5, "sigma": 5, "xxx": [], "dir": [], "n_dialectical_structur": 5, "rethon": 5, "model": [5, 6], "allow_empty_posit": 5, "sampl": 5, "exce": 5, "json_obj": 5, "dialectical_structure_modul": 5, "dialectical_structure_class": 5, "bitarraydialecticalstructur": [], "hook": 5, "load": 5, "modulenam": 5, "classnam": 5, "re_object": 5, "fp": 5, "cl": 5, "dump": 5, "time": 5, "arg_list": [], "equal_rank_for_principl": 5, "doca": [], "is_minimally_compat": [0, 1, 2, 3, 4], "args_to_cnf": [0, 5], "match": [1, 2, 3, 4, 7], "assum": 5, "preced": 5, "fall": 5, "ha": [3, 5], "togeth": 5, "param": 5, "addit": 5, "constraint": 5, "core": 5, "graphic": 5, "equal": 5, "rank": 5, "assign": 5, "optim": 4, "advic": 4, "illustr": 4, "context": 4, "computation": 3, "case": 3, "go": 3, "through": 3, "immut": [1, 7], "In": 1, "distinct": [1, 7], "pos1": [1, 7], "bound": [1, 7], "pass": [1, 7], "oper": 7, "usual": 7, "fashion": 7, "13": 7, "traceback": [], "recent": [], "cell": [], "line": [], "amp": [], "unsupport": [], "operand": [], "want": 7, "underli": 7, "reinstanti": 7, "pos_n5": 7, "pos_n6": 7, "sinc": 7, "set_of_posit": 7, "criteria": 7, "12": 7, "pos_setbas": 7, "pos_bitarrai": 7, "pos_np": 7, "16": [], "larg": 3, "There": 7, "colab": 7, "jupyterlab": 7, "pip": [6, 7], "on_colab": 7, "googl": 7, "get_ipython": 7, "ye": 7, "els": 7, "No": 7, "numpy_implement": 7, "softwar": 9, "below": 9, "With": 6, "pydata": [], "re": 6, "href": [], "pypi": 6, "project": 6, "target": [], "_blank": [], "automat": 6, "mit": 6, "tutori": 6}, "objects": {"theodias": [[3, 0, 1, "", "BDDNumpyDialecticalStructure"], [2, 0, 1, "", "BitarrayPosition"], [2, 0, 1, "", "DAGBitarrayDialecticalStructure"], [3, 0, 1, "", "DAGNumpyDialecticalStructure"], [4, 0, 1, "", "DAGSetBasedDialecticalStructure"], [1, 0, 1, "", "DialecticalStructure"], [3, 0, 1, "", "NumpyPosition"], [1, 0, 1, "", "Position"], [4, 0, 1, "", "SetBasedPosition"], [5, 3, 0, "-", "util"]], "theodias.BDDNumpyDialecticalStructure": [[3, 1, 1, "", "__init__"], [3, 1, 1, "", "are_compatible"], [3, 1, 1, "", "axioms"], [3, 1, 1, "", "closure"], [3, 1, 1, "", "complete_minimally_consistent_positions"], [3, 1, 1, "", "consistent_complete_positions"], [3, 1, 1, "", "consistent_positions"], [3, 1, 1, "", "degree_of_justification"], [3, 1, 1, "", "entails"], [3, 1, 1, "", "from_arguments"], [3, 1, 1, "", "get_name"], [3, 1, 1, "", "is_consistent"], [3, 1, 1, "", "minimally_consistent_positions"], [3, 1, 1, "", "n_complete_extensions"], [3, 2, 1, "", "name"], [3, 1, 1, "", "set_name"]], "theodias.BitarrayPosition": [[2, 1, 1, "", "__init__"], [2, 1, 1, "", "as_bitarray"], [2, 1, 1, "", "as_list"], [2, 1, 1, "", "as_set"], [2, 1, 1, "", "as_ternary"], [2, 1, 1, "", "difference"], [2, 1, 1, "", "domain"], [2, 1, 1, "", "from_set"], [2, 1, 1, "", "intersection"], [2, 1, 1, "", "is_accepting"], [2, 1, 1, "", "is_in_domain"], [2, 1, 1, "", "is_minimally_compatible"], [2, 1, 1, "", "is_minimally_consistent"], [2, 1, 1, "", "is_subposition"], [2, 1, 1, "", "neighbours"], [2, 1, 1, "", "sentence_pool"], [2, 1, 1, "", "size"], [2, 1, 1, "", "subpositions"], [2, 1, 1, "", "union"]], "theodias.DAGBitarrayDialecticalStructure": [[2, 1, 1, "", "__init__"], [2, 1, 1, "", "add_argument"], [2, 1, 1, "", "add_arguments"], [2, 1, 1, "", "are_compatible"], [2, 1, 1, "", "axioms"], [2, 1, 1, "", "closed_positions"], [2, 1, 1, "", "closure"], [2, 1, 1, "", "complete_extensions"], [2, 1, 1, "", "complete_minimally_consistent_positions"], [2, 1, 1, "", "consistent_complete_positions"], [2, 1, 1, "", "consistent_positions"], [2, 1, 1, "", "degree_of_justification"], [2, 1, 1, "", "entails"], [2, 1, 1, "", "from_arguments"], [2, 1, 1, "", "get_arguments"], [2, 1, 1, "", "get_name"], [2, 1, 1, "", "is_closed"], [2, 1, 1, "", "is_complete"], [2, 1, 1, "", "is_consistent"], [2, 1, 1, "", "is_minimal"], [2, 1, 1, "", "minimal_positions"], [2, 1, 1, "", "minimally_consistent_positions"], [2, 1, 1, "", "n_complete_extensions"], [2, 1, 1, "", "sentence_pool"], [2, 1, 1, "", "set_name"], [2, 1, 1, "", "to_bitarray_position"]], "theodias.DAGNumpyDialecticalStructure": [[3, 1, 1, "", "__init__"], [3, 1, 1, "", "add_argument"], [3, 1, 1, "", "add_arguments"], [3, 1, 1, "", "are_compatible"], [3, 1, 1, "", "axioms"], [3, 1, 1, "", "closed_positions"], [3, 1, 1, "", "closure"], [3, 1, 1, "", "complete_minimally_consistent_positions"], [3, 1, 1, "", "consistent_complete_positions"], [3, 1, 1, "", "consistent_positions"], [3, 1, 1, "", "degree_of_justification"], [3, 1, 1, "", "entails"], [3, 1, 1, "", "from_arguments"], [3, 1, 1, "", "get_arguments"], [3, 1, 1, "", "get_name"], [3, 1, 1, "", "is_closed"], [3, 1, 1, "", "is_complete"], [3, 1, 1, "", "is_consistent"], [3, 1, 1, "", "is_minimal"], [3, 1, 1, "", "minimal_positions"], [3, 1, 1, "", "minimally_consistent_positions"], [3, 1, 1, "", "n_complete_extensions"], [3, 1, 1, "", "sentence_pool"], [3, 1, 1, "", "set_name"]], "theodias.DAGSetBasedDialecticalStructure": [[4, 1, 1, "", "__init__"], [4, 1, 1, "", "add_argument"], [4, 1, 1, "", "add_arguments"], [4, 1, 1, "", "are_compatible"], [4, 1, 1, "", "axioms"], [4, 1, 1, "", "closed_positions"], [4, 1, 1, "", "closure"], [4, 1, 1, "", "complete_minimally_consistent_positions"], [4, 1, 1, "", "compute_complete_consistent_positions"], [4, 1, 1, "", "consistent_complete_positions"], [4, 1, 1, "", "consistent_positions"], [4, 1, 1, "", "degree_of_justification"], [4, 1, 1, "", "entails"], [4, 1, 1, "", "from_arguments"], [4, 1, 1, "", "get_arguments"], [4, 1, 1, "", "get_name"], [4, 1, 1, "", "is_closed"], [4, 1, 1, "", "is_complete"], [4, 1, 1, "", "is_consistent"], [4, 1, 1, "", "is_minimal"], [4, 1, 1, "", "minimal_positions"], [4, 1, 1, "", "minimally_consistent_positions"], [4, 1, 1, "", "n_complete_extensions"], [4, 1, 1, "", "sentence_pool"], [4, 1, 1, "", "set_name"]], "theodias.DialecticalStructure": [[1, 1, 1, "", "add_argument"], [1, 1, 1, "", "add_arguments"], [1, 1, 1, "", "are_compatible"], [1, 1, 1, "", "axioms"], [1, 1, 1, "", "closed_positions"], [1, 1, 1, "", "closure"], [1, 1, 1, "", "consistent_complete_positions"], [1, 1, 1, "", "consistent_positions"], [1, 1, 1, "", "degree_of_justification"], [1, 1, 1, "", "entails"], [1, 1, 1, "", "from_arguments"], [1, 1, 1, "", "get_arguments"], [1, 1, 1, "", "get_name"], [1, 1, 1, "", "is_closed"], [1, 1, 1, "", "is_complete"], [1, 1, 1, "", "is_consistent"], [1, 1, 1, "", "is_minimal"], [1, 1, 1, "", "minimal_positions"], [1, 1, 1, "", "minimally_consistent_positions"], [1, 1, 1, "", "n_complete_extensions"], [1, 1, 1, "", "sentence_pool"], [1, 1, 1, "", "set_name"]], "theodias.NumpyPosition": [[3, 1, 1, "", "__init__"], [3, 1, 1, "", "as_bitarray"], [3, 1, 1, "", "as_list"], [3, 1, 1, "", "as_np_array"], [3, 1, 1, "", "as_set"], [3, 1, 1, "", "as_ternary"], [3, 1, 1, "", "difference"], [3, 1, 1, "", "direct_subpositions"], [3, 1, 1, "", "domain"], [3, 1, 1, "", "from_set"], [3, 1, 1, "", "intersection"], [3, 1, 1, "", "is_accepting"], [3, 1, 1, "", "is_in_domain"], [3, 1, 1, "", "is_minimally_compatible"], [3, 1, 1, "", "is_minimally_consistent"], [3, 1, 1, "", "is_subposition"], [3, 1, 1, "", "neighbours"], [3, 1, 1, "", "sentence_pool"], [3, 1, 1, "", "size"], [3, 1, 1, "", "subpositions"], [3, 1, 1, "", "to_numpy_position"], [3, 1, 1, "", "union"]], "theodias.Position": [[1, 1, 1, "", "__init__"], [1, 1, 1, "", "as_bitarray"], [1, 1, 1, "", "as_list"], [1, 1, 1, "", "as_set"], [1, 1, 1, "", "as_ternary"], [1, 1, 1, "", "difference"], [1, 1, 1, "", "domain"], [1, 1, 1, "", "from_set"], [1, 1, 1, "", "intersection"], [1, 1, 1, "", "is_accepting"], [1, 1, 1, "", "is_in_domain"], [1, 1, 1, "", "is_minimally_compatible"], [1, 1, 1, "", "is_minimally_consistent"], [1, 1, 1, "", "is_subposition"], [1, 1, 1, "", "neighbours"], [1, 1, 1, "", "sentence_pool"], [1, 1, 1, "", "size"], [1, 1, 1, "", "subpositions"], [1, 1, 1, "", "union"]], "theodias.SetBasedPosition": [[4, 1, 1, "", "__init__"], [4, 1, 1, "", "as_bitarray"], [4, 1, 1, "", "as_list"], [4, 1, 1, "", "as_set"], [4, 1, 1, "", "as_setbased_position"], [4, 1, 1, "", "as_ternary"], [4, 1, 1, "", "difference"], [4, 1, 1, "", "domain"], [4, 1, 1, "", "from_set"], [4, 1, 1, "", "intersection"], [4, 1, 1, "", "is_accepting"], [4, 1, 1, "", "is_in_domain"], [4, 1, 1, "", "is_minimally_compatible"], [4, 1, 1, "", "is_minimally_consistent"], [4, 1, 1, "", "is_subposition"], [4, 1, 1, "", "neighbours"], [4, 1, 1, "", "sentence_pool"], [4, 1, 1, "", "size"], [4, 1, 1, "", "subpositions"], [4, 1, 1, "", "union"]], "theodias.util": [[5, 0, 1, "", "TauJSONEncoder"], [5, 4, 1, "", "arg_to_cnf"], [5, 4, 1, "", "args_to_cnf"], [5, 4, 1, "", "create_random_argument_list"], [5, 4, 1, "", "create_random_arguments"], [5, 4, 1, "", "get_principles"], [5, 4, 1, "", "inferential_density"], [5, 4, 1, "", "is_satisfiable"], [5, 4, 1, "", "number_of_complete_consistent_positions"], [5, 4, 1, "", "random_dialectical_structures"], [5, 4, 1, "", "random_position_as_set"], [5, 4, 1, "", "random_positions"], [5, 4, 1, "", "tau_decoder"], [5, 4, 1, "", "tau_dump"], [5, 4, 1, "", "tau_dumps"], [5, 4, 1, "", "tau_load"], [5, 4, 1, "", "tau_loads"], [5, 4, 1, "", "write_as_dot"], [5, 4, 1, "", "write_as_tex"]], "theodias.util.TauJSONEncoder": [[5, 1, 1, "", "__init__"], [5, 1, 1, "", "default"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:attribute", "3": "py:module", "4": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "module", "Python module"], "4": ["py", "function", "Python function"]}, "titleterms": {"api": 0, "document": [0, 6], "abstract": 1, "base": [1, 4], "class": 1, "posit": [1, 7], "dialecticalstructur": 1, "bitarrai": 2, "implement": [2, 3, 4], "bitarrayposit": 2, "dagbitarraydialecticalstructur": 2, "numpi": 3, "numpyposit": 3, "dagnumpydialecticalstructur": 3, "bddnumpydialecticalstructur": 3, "set": 4, "setbasedposit": 4, "dagsetbaseddialecticalstructur": 4, "util": 5, "method": 5, "tau": [], "instal": [6, 7], "us": [7, 9], "pip": [], "from": [], "sourc": [], "code": [], "log": 6, "licenc": 6, "refer": 6, "introduct": 7, "packag": 7, "instanti": 7, "dialect": [7, 9], "structur": [7, 9], "export": 7, "json": 7, "serial": 7, "object": 7, "deseri": 7, "tutori": 8, "visualis": 9, "dot": 9, "format": 9, "creat": 9, "automat": 9, "layout": 9, "graph": 9, "theodia": [6, 7, 8], "import": 7, "note": 7, "how": 7, "run": 7, "thi": 7, "notebook": 7, "librari": 7}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx": 60}, "alltitles": {"API Documentation": [[0, "api-documentation"]], "Abstract Base Classes": [[1, "abstract-base-classes"]], "Position": [[1, "position"]], "DialecticalStructure": [[1, "dialecticalstructure"]], "Bitarray Implementation": [[2, "bitarray-implementation"]], "BitarrayPosition": [[2, "bitarrayposition"]], "DAGBitarrayDialecticalStructure": [[2, "dagbitarraydialecticalstructure"]], "Numpy Implementation": [[3, "numpy-implementation"]], "NumpyPosition": [[3, "numpyposition"]], "DAGNumpyDialecticalStructure": [[3, "dagnumpydialecticalstructure"]], "BDDNumpyDialecticalStructure": [[3, "bddnumpydialecticalstructure"]], "Introduction of using the theodias package": [[7, "Introduction-of-using-the-theodias-package"]], "How to run this notebook": [[7, "How-to-run-this-notebook"]], "Installing libraries": [[7, "Installing-libraries"]], "Instantiation of dialectical structures and positions": [[7, "Instantiation-of-dialectical-structures-and-positions"]], "Important notes": [[7, "Important-notes"]], "Export to JSON": [[7, "Export-to-JSON"]], "Serializing theodias objects": [[7, "Serializing-theodias-objects"]], "Deserializing theodias objects": [[7, "Deserializing-theodias-objects"]], "Visualising Dialectical Structures": [[9, "Visualising-Dialectical-Structures"]], "Using the dot format to create automatically layouted graphs": [[9, "Using-the-dot-format-to-create-automatically-layouted-graphs"]], "Theodias Tutorials": [[8, "theodias-tutorials"]], "Set Based Implementation": [[4, "set-based-implementation"]], "SetBasedPosition": [[4, "setbasedposition"]], "DAGSetBasedDialecticalStructure": [[4, "dagsetbaseddialecticalstructure"]], "Utility Methods": [[5, "module-theodias.util"]], "Theodias": [[6, "theodias"]], "Installation": [[6, "installation"]], "Documentation": [[6, "documentation"]], "Logging": [[6, "logging"]], "Licence": [[6, "licence"]], "References": [[6, "references"]]}, "indexentries": {"dagsetbaseddialecticalstructure (class in theodias)": [[4, "theodias.DAGSetBasedDialecticalStructure"]], "setbasedposition (class in theodias)": [[4, "theodias.SetBasedPosition"]], "__init__() (theodias.dagsetbaseddialecticalstructure method)": [[4, "theodias.DAGSetBasedDialecticalStructure.__init__"]], "__init__() (theodias.setbasedposition method)": [[4, "theodias.SetBasedPosition.__init__"]], "add_argument() (theodias.dagsetbaseddialecticalstructure method)": [[4, "theodias.DAGSetBasedDialecticalStructure.add_argument"]], "add_arguments() (theodias.dagsetbaseddialecticalstructure method)": [[4, "theodias.DAGSetBasedDialecticalStructure.add_arguments"]], "are_compatible() (theodias.dagsetbaseddialecticalstructure method)": [[4, "theodias.DAGSetBasedDialecticalStructure.are_compatible"]], "as_bitarray() (theodias.setbasedposition method)": [[4, "theodias.SetBasedPosition.as_bitarray"]], "as_list() (theodias.setbasedposition method)": [[4, "theodias.SetBasedPosition.as_list"]], "as_set() (theodias.setbasedposition method)": [[4, "theodias.SetBasedPosition.as_set"]], "as_setbased_position() (theodias.setbasedposition static method)": [[4, "theodias.SetBasedPosition.as_setbased_position"]], "as_ternary() (theodias.setbasedposition method)": [[4, "theodias.SetBasedPosition.as_ternary"]], "axioms() (theodias.dagsetbaseddialecticalstructure method)": [[4, "theodias.DAGSetBasedDialecticalStructure.axioms"]], "closed_positions() (theodias.dagsetbaseddialecticalstructure method)": [[4, "theodias.DAGSetBasedDialecticalStructure.closed_positions"]], "closure() (theodias.dagsetbaseddialecticalstructure method)": [[4, "theodias.DAGSetBasedDialecticalStructure.closure"]], "complete_minimally_consistent_positions() (theodias.dagsetbaseddialecticalstructure method)": [[4, "theodias.DAGSetBasedDialecticalStructure.complete_minimally_consistent_positions"]], "compute_complete_consistent_positions() (theodias.dagsetbaseddialecticalstructure method)": [[4, "theodias.DAGSetBasedDialecticalStructure.compute_complete_consistent_positions"]], "consistent_complete_positions() (theodias.dagsetbaseddialecticalstructure method)": [[4, "theodias.DAGSetBasedDialecticalStructure.consistent_complete_positions"]], "consistent_positions() (theodias.dagsetbaseddialecticalstructure method)": [[4, "theodias.DAGSetBasedDialecticalStructure.consistent_positions"]], "degree_of_justification() (theodias.dagsetbaseddialecticalstructure method)": [[4, "theodias.DAGSetBasedDialecticalStructure.degree_of_justification"]], "difference() (theodias.setbasedposition method)": [[4, "theodias.SetBasedPosition.difference"]], "domain() (theodias.setbasedposition method)": [[4, "theodias.SetBasedPosition.domain"]], "entails() (theodias.dagsetbaseddialecticalstructure method)": [[4, "theodias.DAGSetBasedDialecticalStructure.entails"]], "from_arguments() (theodias.dagsetbaseddialecticalstructure static method)": [[4, "theodias.DAGSetBasedDialecticalStructure.from_arguments"]], "from_set() (theodias.setbasedposition static method)": [[4, "theodias.SetBasedPosition.from_set"]], "get_arguments() (theodias.dagsetbaseddialecticalstructure method)": [[4, "theodias.DAGSetBasedDialecticalStructure.get_arguments"]], "get_name() (theodias.dagsetbaseddialecticalstructure method)": [[4, "theodias.DAGSetBasedDialecticalStructure.get_name"]], "intersection() (theodias.setbasedposition method)": [[4, "theodias.SetBasedPosition.intersection"]], "is_accepting() (theodias.setbasedposition method)": [[4, "theodias.SetBasedPosition.is_accepting"]], "is_closed() (theodias.dagsetbaseddialecticalstructure method)": [[4, "theodias.DAGSetBasedDialecticalStructure.is_closed"]], "is_complete() (theodias.dagsetbaseddialecticalstructure method)": [[4, "theodias.DAGSetBasedDialecticalStructure.is_complete"]], "is_consistent() (theodias.dagsetbaseddialecticalstructure method)": [[4, "theodias.DAGSetBasedDialecticalStructure.is_consistent"]], "is_in_domain() (theodias.setbasedposition method)": [[4, "theodias.SetBasedPosition.is_in_domain"]], "is_minimal() (theodias.dagsetbaseddialecticalstructure method)": [[4, "theodias.DAGSetBasedDialecticalStructure.is_minimal"]], "is_minimally_compatible() (theodias.setbasedposition method)": [[4, "theodias.SetBasedPosition.is_minimally_compatible"]], "is_minimally_consistent() (theodias.setbasedposition method)": [[4, "theodias.SetBasedPosition.is_minimally_consistent"]], "is_subposition() (theodias.setbasedposition method)": [[4, "theodias.SetBasedPosition.is_subposition"]], "minimal_positions() (theodias.dagsetbaseddialecticalstructure method)": [[4, "theodias.DAGSetBasedDialecticalStructure.minimal_positions"]], "minimally_consistent_positions() (theodias.dagsetbaseddialecticalstructure method)": [[4, "theodias.DAGSetBasedDialecticalStructure.minimally_consistent_positions"]], "n_complete_extensions() (theodias.dagsetbaseddialecticalstructure method)": [[4, "theodias.DAGSetBasedDialecticalStructure.n_complete_extensions"]], "neighbours() (theodias.setbasedposition method)": [[4, "theodias.SetBasedPosition.neighbours"]], "sentence_pool() (theodias.dagsetbaseddialecticalstructure method)": [[4, "theodias.DAGSetBasedDialecticalStructure.sentence_pool"]], "sentence_pool() (theodias.setbasedposition method)": [[4, "theodias.SetBasedPosition.sentence_pool"]], "set_name() (theodias.dagsetbaseddialecticalstructure method)": [[4, "theodias.DAGSetBasedDialecticalStructure.set_name"]], "size() (theodias.setbasedposition method)": [[4, "theodias.SetBasedPosition.size"]], "subpositions() (theodias.setbasedposition method)": [[4, "theodias.SetBasedPosition.subpositions"]], "union() (theodias.setbasedposition method)": [[4, "theodias.SetBasedPosition.union"]], "taujsonencoder (class in theodias.util)": [[5, "theodias.util.TauJSONEncoder"]], "__init__() (theodias.util.taujsonencoder method)": [[5, "theodias.util.TauJSONEncoder.__init__"]], "arg_to_cnf() (in module theodias.util)": [[5, "theodias.util.arg_to_cnf"]], "args_to_cnf() (in module theodias.util)": [[5, "theodias.util.args_to_cnf"]], "create_random_argument_list() (in module theodias.util)": [[5, "theodias.util.create_random_argument_list"]], "create_random_arguments() (in module theodias.util)": [[5, "theodias.util.create_random_arguments"]], "default() (theodias.util.taujsonencoder method)": [[5, "theodias.util.TauJSONEncoder.default"]], "get_principles() (in module theodias.util)": [[5, "theodias.util.get_principles"]], "inferential_density() (in module theodias.util)": [[5, "theodias.util.inferential_density"]], "is_satisfiable() (in module theodias.util)": [[5, "theodias.util.is_satisfiable"]], "module": [[5, "module-theodias.util"]], "number_of_complete_consistent_positions() (in module theodias.util)": [[5, "theodias.util.number_of_complete_consistent_positions"]], "random_dialectical_structures() (in module theodias.util)": [[5, "theodias.util.random_dialectical_structures"]], "random_position_as_set() (in module theodias.util)": [[5, "theodias.util.random_position_as_set"]], "random_positions() (in module theodias.util)": [[5, "theodias.util.random_positions"]], "tau_decoder() (in module theodias.util)": [[5, "theodias.util.tau_decoder"]], "tau_dump() (in module theodias.util)": [[5, "theodias.util.tau_dump"]], "tau_dumps() (in module theodias.util)": [[5, "theodias.util.tau_dumps"]], "tau_load() (in module theodias.util)": [[5, "theodias.util.tau_load"]], "tau_loads() (in module theodias.util)": [[5, "theodias.util.tau_loads"]], "theodias.util": [[5, "module-theodias.util"]], "write_as_dot() (in module theodias.util)": [[5, "theodias.util.write_as_dot"]], "write_as_tex() (in module theodias.util)": [[5, "theodias.util.write_as_tex"]]}})